
@model IEnumerable<PlantNests.Models.Product>
@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Userlayout.cshtml";
}


@{
    var user = ViewContext.HttpContext.Session.GetString("id");
}
    <style>
        .add-to-cart-btn,
        .qty-count {
            background-color: #90EE90; /* Light green color */
            border: none;
            color: #fff;
        }

            .add-to-cart-btn:hover,
            .qty-count:hover {
                background-color: #76c376; /* Slightly darker green on hover */
            }

        .product-img {
            position: relative;
            overflow: hidden; /* Ensure the button stays within bounds */
        }


        .star-rating {
            font-size: 18px; /* Adjust size as needed */
            color: #FFD700; /* Gold color for stars */
            display: inline-block;
        }

        .star-rating .fa-star {
            cursor: pointer;
        }

            .star-rating .fa-star.checked {
                color: #FFBF00; /* Highlighted star color */
                display:none;
            }

            .product-meta {
                display: flex;
                justify-content: center;
                margin-top: 10px; /* Space above the button */
            }

            .product-meta input.add-to-cart-btn {
                background-color: #90EE90; /* Light green color */
                border: none;
                color: #fff;
                padding: 10px 20px; /* Padding inside the button */
                border-radius: 5px; /* Optional: rounded corners */
            }

            .product-meta input.add-to-cart-btn:hover {
                background-color: #76c376; /* Slightly darker green on hover */
            }
            /* General star styles */
            .star-rating .ratingstar {
                font-size: 19px;
                color: #d3d3d3; /* Light gray color for unselected stars */
                cursor: pointer;
                border: 2px solid transparent; /* Default border color (transparent) */
                border-radius: 50%; /* Rounded border */
                padding: 2px; /* Add some space around the star */
            }

            /* Hover effect for stars */
            .star-rating .ratingstar:hover {
                color: #ffcc00; /* Color for the stars on hover */
                border-color: #ffcc00; /* Yellow border on hover */
            }

            /* Selected stars (when clicked) */
            .star-rating .ratingstar.selected {
             color: #ffcc00; /* Yellow color for selected stars */
             border-color: #ffcc00; /* Yellow border for selected stars */

            }
            .ratings i:hover,
            .ratings i.hover,
            .ratings i.active 
            .ratings i.selected
            {
               color: #ffcc00;
            }
        
            ratings i {
            font-size: 15px;
            color: #ddd; /* Default star color */
            cursor: pointer;
            }

            .ratings i.fas
            {
                color: #ffcc00; /* Star color when active or selected */
            }

          /* .ratings i.far {
                color: #ddd; 
            }*/

            .product-form {
                margin-bottom: 20px;
            }

            .product-image img {
                width: 100%; /* Ensure image takes full width of its container */
            }

            .product-info {
                margin-bottom: 10px; /* Adjust spacing */
            }

            .qty-input {
                /*margin-top: 10px;*/
            }

            .ratings i {
                cursor: pointer; /* Make stars clickable */
            }

    </style>

        @{
            var productQuantities = ViewBag.ProductQuantities as Dictionary<int, int>;
        }

    <section class="hero-area">
        <div class="hero-post-slides owl-carousel">
            <div class="single-hero-post bg-overlay">
                <div class="slide-img bg-img" style="background-image: url('/Clientsite/img/bg-img/1.jpg');"></div>
                <div class="container h-100">
                    <div class="row h-100 align-items-center">
                        <div class="col-12">
                        </div>
                    </div>
                </div>
            </div>
            <div class="single-hero-post bg-overlay">
                <div class="slide-img bg-img" style="background-image: url('/Clientsite/img/bg-img/2.jpg');"></div>
                <div class="container h-100">
                    <div class="row h-100 align-items-center">
                    </div>
                </div>
            </div>
        </div>
        </section>
         <section class="new-arrivals-products-area bg-gray section-padding-100">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="section-heading text-center">
                        <h2>NEW ARRIVALS</h2>
                        <p>We have the latest products, it must be exciting for you</p>
                    </div>
                </div>
            </div>
          <div class="row">
            @foreach(var item in Model)
            {
                <div class="col-12 col-sm-6 col-lg-3">
                    <div class="single-product-area mb-50 wow fadeInUp" data-wow-delay="100ms">
                        <!-- Product Image -->
                      @*  <div class="product-image">
                            <img src="~/@item.productimage" alt="@item.productName">
                        </div>*@

                        <form method="post" asp-action="Home" asp-controller="Client">
                            <input type="hidden" name="productid" value="@item.productId"/>
                            <input type="hidden" name="image" value="@item.productimage"/>
                            <input type="hidden" name="price" value="@item.price"/>
                            <div class="product-image">
                                <img src="~/@item.productimage" alt="@item.productName">
                            </div>
                            <div class="product-info">
                                <div class="product-tag ml-5">
                                <a>@item.productName</a>
                                </div>
                                <div class="product-tag ml-5">
                                <a>@item.price</a>
                                  
                                </div>
                            </div>


                            @if (productQuantities != null && productQuantities.ContainsKey(item.productId))
                            {
                                var quantity = productQuantities[item.productId];

                                <div class="qty-input text-center mt-2" data-product-id="@item.productId" data-max-quantity="@quantity">
                                    <button class="qty-count qty-count--minus btn btn-primary" data-action="minus" type="button">-</button>
                                    <input class="product-qty" type="number" name="qty" min="1" max="@quantity" value="1" data-quantity-input>
                                    <button class="qty-count qty-count--add btn btn-primary" data-action="add" type="button">+</button>
                                </div>

                                if (quantity == 0 && quantity <= 0)
                                {
                                    <p class="text-center" style="color:forestgreen">Out Of Stock</p>
                                }
                                else
                                {
                                    <p class="text-center" style="color:forestgreen">Stock In</p>
                                }

                            }

                        
                                    @if(user != null)
                                    {
                                    <div class="ratings text-center">
                                    <i class="fa fa-star ratingstart" data-value="1" data-productid="@item.productId"></i>
                                    <i class="fa fa-star ratingstart" data-value="2" data-productid="@item.productId"></i>
                                    <i class="fa fa-star ratingstart" data-value="3" data-productid="@item.productId"></i>
                                    <i class="fa fa-star ratingstart" data-value="4" data-productid="@item.productId"></i>
                                    <i class="fa fa-star ratingstart" data-value="5" data-productid="@item.productId"></i>
                                    </div>
                                    }
                            @if (productQuantities != null && productQuantities.ContainsKey(item.productId))
                            {
                                var quantity = productQuantities[item.productId];

                                if (quantity == 0 && quantity <= 0)
                                {
                                    
                                }
                                else
                                {
                                    <div class="product-meta d-flex">
                                        <input type="submit" class="add-to-cart-btn btn btn-primary mt-2 text-center" value="Add to cart">
                                    </div>
                                }
                            }

                        </form>
         
                    </div>
                </div>
            }
        </div>
    </div>
</section>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Select all quantity input containers
            const qtyInputs = document.querySelectorAll('.qty-input');

            qtyInputs.forEach(function (qtyInput) {
                // Get max quantity from data attribute
                const maxQuantity = parseInt(qtyInput.dataset.maxQuantity);
                const inputField = qtyInput.querySelector('input[data-quantity-input]');
                const addButton = qtyInput.querySelector('[data-action="add"]');
                const minusButton = qtyInput.querySelector('[data-action="minus"]');

                // Add event listener for the add button
                   addButton.addEventListener('click', function () {
                    let currentValue = parseInt(inputField.value);
                    if (currentValue < maxQuantity) {
                        inputField.value = currentValue + 1;
                    }
                    if (parseInt(inputField.value) === maxQuantity) {
                        addButton.disabled = true;
                        // Disable add button if max quantity reached
                    }
                    minusButton.disabled = false; // Ensure minus button is enabled
                });

                // Add event listener for the minus button
                minusButton.addEventListener('click', function () {
                    let currentValue = parseInt(inputField.value);
                    if (currentValue > 1) {
                        inputField.value = currentValue - 1;
                    }
                    if (parseInt(inputField.value) === 1) {
                        minusButton.disabled = true; // Disable minus button if min quantity reached
                    }
                    addButton.disabled = false; // Ensure add button is enabled
                });

                // Initialize buttons based on initial value
                if (parseInt(inputField.value) === 1) {
                    minusButton.disabled = true;
                }
                if (parseInt(inputField.value) === maxQuantity) {
                    addButton.disabled = true;
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".ratingstart").hover(function () {
                if (!$(this).hasClass("active")) {
                    $(".ratingstart").removeClass("fas").addClass("far");
                    $(this).addClass("fas").removeClass("far");
                    $(this).prevAll(".ratingstart").addClass("fas").removeClass("far");
                }
            });

            $(".ratingstart").click(function () {
                var startvalue = $(this).data("value");
                var productId = $(this).data("productid");

                $.ajax({
                    url: '/Client/Rating',
                    type: 'POST',
                    data: {
                        productid: productId,
                        rating: startvalue
                    },
                    success: function (response) {
                    },
                    error: function (xhr, status, error) {
                        alert('Error: ' + error);
                    }
                });
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            $(".ratingstart").hover(function () {
                if (!$(this).hasClass("active")) {
                    $(".ratingstart").removeClass("fas").addClass("far");
                    $(this).addClass("fas").removeClass("far");
                    $(this).prevAll(".ratingstart").addClass("fas").removeClass("far");
                }
            });

            $(".ratingstart").click(function () {
                var startvalue = $(this).data("value");
                var productId = $(this).data("productid");

                $.ajax({
                    url: '/Client/Rating',
                    type: 'POST',
                    data: {
                        productid: productId,
                        rating: startvalue
                    },
                    success: function (response) {
                    },
                    error: function (xhr, status, error) {
                        alert('Error: ' + error);
                    }
                });
            });
        });

    </script>
